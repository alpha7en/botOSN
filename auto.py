# -*- coding: utf8 -*-
"""
!!!!!!!!!!!!!!!
ВЕСА ВЗЯЛ ТУТ!
https://pjreddie.com/media/files/yolov3.weights
НА РЕПЕ ИХ НЕТУ!
весят они 250мб, так что считай объём сервера
!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!

"""
import blackFON
import random
import cv2
import numpy as np
import time
import sys
import os

CONFIDENCE = 0.5
SCORE_THRESHOLD = 0.5
IOU_THRESHOLD = 0.5

# конфигурация нейронной сети
config_path = "auto_data/cfg/yolov3.cfg"
# файл весов сети YOLO
weights_path = "auto_data/weights/yolov3.weights"
# weights_path = "weights/yolov3-tiny.weights"

# загрузка всех меток классов (объектов)
labels = ['человек', 'велосипед', 'автомобиль', 'мотоцикл', 'самолет', 'автобус', 'поезд', 'грузовик', 'лодка',
          'светофор', 'пожарный гидрант', 'знак остановки', 'парковочный счетчик', 'скамейка', 'птица', 'кошка',
          'собака', 'лошадь', 'овца', 'корова', 'слон', 'медведь', 'зебра', 'жираф', 'рюкзак', 'зонтик', 'сумка',
          'галстук', 'чемодан', 'фрисби', 'лыжи', 'сноуборд', 'спортивный мяч', 'воздушный змей', 'бейсбольная бита',
          'бейсбольная перчатка', 'скейтборд', 'доска для серфинга', 'теннисная ракетка', 'бутылка', 'бокал',
          'чашка', 'вилка', 'нож', 'ложка', 'чаша', 'банан', 'яблоко', 'сэндвич', 'апельсин', 'брокколи',
          'морковка', 'хот-дог', 'пицца', 'пончик', 'торт', 'стул', 'диван', 'растение в горшке', 'кровать',
          'обеденный стол', 'туалет', 'телевизор', 'ноутбук', 'мышь', 'пульт',
          'клавиатура', 'сотовый телефон', 'микроволновая печь', 'печь', 'тостер', 'раковина',
          'холодильник', 'книга', 'часы', 'ваза', 'ножницы', 'плюшевый мишка', 'фен', 'зубная щетка']
# генерируем цвета для каждого объекта и последующего построения

sinonims = {'человек': ['личность', 'мужчина', 'женщина', 'парень', 'существо', 'человеческое существо'],
            'велосипед': ['велик', 'двухколесный конь', 'велосипедик'], 'автомобиль': ['машина', 'конь', 'ведро'],
            'мотоцикл': ['мотоциклет', 'моцик'], 'самолет': ['МиГ'], 'автобус': ['пазик', 'скотовозка'],
            'поезд': ['состав'], 'грузовик': ['КамАЗ'], 'лодка': ['корабль'], 'светофор': ['светофор'],
            'пожарный гидрант': ['пожарный гидрант'], 'знак остановки': ['стоп'], 'парковочный счетчик': ['счётчик'],
            'скамейка': ['лавка'], 'птица': ['курица'], 'кошка': ['кошак', 'лев'], 'собака': ['пес', '	Шарик'],
            'лошадь': ['конь', 'кобыла', 'скакун', 'ишак'], 'овца': ['овечка'], 'корова': ['корова'], 'слон': ['слон'],
            'медведь': ['мишка', 'медвежонок'], 'зебра': ['зебра'], 'жираф': ['жираф'], 'рюкзак': ['мешок', 'ранец'],
            'зонтик': ['зонт'], 'сумка': ['сумочка', 'пакет'], 'галстук': ['галстук'], 'чемодан': ['чемодан'],
            'фрисби': ['фрисби'], 'лыжи': ['лыжи'], 'сноуборд': ['сноуборд'], 'спортивный мяч': ['мяч', 'мячик'],
            'воздушный змей': ['воздушный змей'], 'бейсбольная бита': ['бита', 'выбивалка'],
            'бейсбольная перчатка': ['перчатка'], 'скейтборд': ['скейт'], 'доска для серфинга': ['сёрф'],
            'теннисная ракетка': ['ракетка'], 'бутылка': ['бутылочка'], 'бокал': ['бокальчик'], 'чашка': ['бокал'],
            'вилка': ['вилка'], 'нож': ['нож'], 'ложка': ['ложка'], 'чаша': ['чашка', 'стакан'],
            'банан': ['банан', 'конец', 'член'], 'яблоко': ['яблочко'], 'сэндвич': ['бутер', 'бутерброд'],
            'апельсин': ['апельсин'], 'брокколи': ['брокколи'],
            'морковка': ['кончик', 'морква', 'елдык', 'маркошка', 'морковина'], 'хот-дог': ['хот-дог'],
            'пицца': ['пицца'], 'пончик': ['пончик'], 'торт': ['торт'], 'стул': ['седалище'],
            'диван': ['седалище', 'диван', 'диван'], 'растение в горшке': ['растение', 'растение'],
            'кровать': ['постель', 'койка'], 'обеденный стол': ['стол', 'стол'],
            'туалет': ['кабинет', 'толчок', 'спальник', 'сортир'], 'телевизор': ['телик', 'моник', 'монитор'],
            'ноутбук': ['ноут'], 'мышь': ['мышь'], 'пульт': ['пульт'], 'клавиатура': ['клава'],
            'сотовый телефон': ['телефон', 'мобила'], 'микроволновая печь': ['микроволновка'], 'печь': ['печь'],
            'тостер': ['тостер'], 'раковина': ['раковина'], 'холодильник': ['холодильник'], 'книга': ['книга'],
            'часы': ['часы'], 'ваза': ['ваза'], 'ножницы': ['ножницы'], 'плюшевый мишка': ['плюшевый мишка'],
            'фен': ['фен'], 'зубная щетка': ['зубная щеткa']}

predlogs = ('нет блин, ', 'нет блин, ', 'нет блин, ', 'а может ', 'а может ', 'ха ха ', 'хотя нет,', 'оппа ')

RIFMA = {'человек': ('хай-тек', 'саундтрек', 'чебурек', 'артек', 'дровосек'),
         'личность': ('античность', 'вторичность', 'эластичность'), 'мужчина': ('дедовщина', 'урина', 'ирина'),
         'женщина': ('деревенщина'), 'парень': ('боярин', 'татарин'), 'существо': ('рождество', 'вещество'),
         'человеческое существо': ('рождество', 'вещество'), 'велосипед': ('скинхед', 'ахмед', 'архимед'),
         'велик': ('челик', 'телик', 'гелик'), 'двухколесный конь': ('вонь', 'ладонь'),
         'велосипедик': ('педик', 'пледик', 'энергетик'), 'автомобиль': ('шпиль', 'бутыль', 'костыль'),
         'машина': ('урина', 'ирина', 'турбина', 'карабина'), 'конь': ('ладонь'),
         'ведро': ('метро', 'политбюро', 'маестро'), 'мотоцикл': ('гидроцикл'),
         'мотоциклет': ('бронежилет', 'интернет', 'нет-нет', 'госбюджет'), 'моцик': ('боцик'),
         'самолет': ('звездолёт', 'бухучёт'), 'МиГ': ('фиг', 'конфиг', 'шутник'),
         'автобус': ('глобус', 'соус', 'тонус'), 'пазик': ('уазик', 'тази', 'тазик', 'разик'),
         'скотовозка': ('повозка', 'причёска', 'берёзка'), 'поезд': ('поиск', 'бронепоезд'),
         'состав': ('домоуправ', 'удав', 'ростислав', 'рукав'),
         'грузовик': ('силовик', 'напрямик', 'бутик', 'снеговик', 'пик'),
         'КамАЗ': ('ass', 'госзаказ', 'спецназ', 'гомеостаз', 'спецзаказ'),
         'лодка': ('бородка', 'сковородка', 'погодка'), 'корабль': ('дирижабль', 'констебль'),
         'светофор': ('генпрокурор', 'хардкор', 'рыбнадзор'),
         'пожарный гидрант': ('грант', 'имплант', 'рок-музыкант', 'консервант'),
         'знак остановки': ('тренировки', 'газировки'), 'стоп': ('стрт', 'старт', 'евростандарт'),
         'парковочный счетчик': ('лётчик', 'переводчик', ' пулемётчик'),
         'скамейка': ('еврейка', 'наклейка', 'телогрейка'), 'лавка': ('отставка', 'доставка'),
         'птица': ('пицца', 'мастерица', 'выпускница', 'ягодица', 'ягодица', 'ягодица'),
         'курица': ('не куриться', 'жмурится', 'хмурится', 'не курится'),
         'кошка': ('лукошко', 'ладошка', 'ложка', 'антошка', 'антошка'),
         'кошак': ('слабак', 'бардак', 'никак', 'кое-как'), 'лев': ('нараспев', 'зев'),
         'собака': ('барака', 'драка', 'кака'), 'пес': ('утёс', 'овёс', 'кросс'),
         '	Шарик': ('Смешарик', 'очкарик', 'комарик', 'бухарик', 'бухарик', 'не варик'), 'лошадь': ('жёлудь'),
         'конь': ('вонь', 'бронь', 'тихонь'), 'кобыла': ('текила', 'могила', 'грузила'),
         'скакун': ('салун', 'колдун', 'чугун', 'сосун'), 'ишак': ('слабак', 'тик-так', 'чувак'), 'овца': ('самца'),
         'овечка': ('уздечка', 'узбечка', 'свечка'), 'корова': ('полслова', 'мова', 'снова'),
         'слон': ('салон', 'регион', 'сон'), 'медведь': ('впредь', 'медь', 'хотеть'),
         'мишка': ('ми-ми-мишка', 'воришка', 'винишка'), 'медвежонок': ('сучонок', 'подонок', 'кукушонок'),
         'зебра': ('бебра'), 'жираф': ('голиаф', 'полиграф', 'телеграф'), 'рюкзак': ('бардак', 'слабак', 'тик-так'),
         'мешок': ('наискосок', 'желудок'), 'ранец': ('афроамериканец', 'вегетарианец'),
         'зонтик': ('антибиотик', 'колхозник'), 'зонт': ('ремонт', 'понт', 'фронт'), 'сумка': ('задумка', 'рюмка'),
         'сумочка': ('рюмочка'), 'пакет': ('макет', 'винегрет'), 'галстук': ('правнук'),
         'чемодан': ('седан', 'уран', 'маман'), 'фрисби': ('избы'), 'лыжи': ('бесстыжи', 'грыжи'),
         'сноуборд': ('билборд', 'дискорд'), 'спортивный мяч': ('зряч', 'висяч', 'стояч'), 'мяч': ('висяч', 'стояч'),
         'мячик': ('пошлячек', 'собачек'), 'воздушный змей': ('дисплей', 'хуавей', 'старлей'),
         'бейсбольная бита': ('соцзащита', 'сито', 'расшита'), 'бита': ('соцзащита'),
         'выбивалка': ('коммуналка', 'колотушка'), 'бейсбольная перчатка': ('распечатка', 'взрывчатка'),
         'перчатка': ('взрывчатка'), 'скейтборд': ('дискорд'), 'скейт': ('борд', 'кликбейт'),
         'доска для серфинга': ('для прессинга'), 'сёрф': ('торф'),
         'теннисная ракетка': ('розетка', 'нимфетка', 'пятилетка'), 'ракетка': ('розетка'),
         'бутылка': ('подстилка', 'ухмылка', 'вилка'), 'бутылочка': ('пилочка', 'ухмылочка'),
         'бокал': ('телеканал', 'вокал', 'маргинал'), 'бокальчик': ('подвальчик', 'пай-мальчик'),
         'чашка': ('чебурашка', 'какашка'), 'бокал': ('вокал', 'макал'), 'вилка': ('страшилка', 'училка'),
         'нож': ('лож', 'рож', 'чернокож'), 'ложка': ('ладошка', 'крошка'), 'чаша': ('маша', 'саша', 'мамаша'),
         'стакан': ('пенополиуретан', 'дружбан', 'уран'), 'банан': ('седан', 'коран', 'круассан'),
         'конец': ('начало', 'огурец'), 'член': ('эстроген', 'джазмен'), 'яблоко': ('яблочко'), 'яблочко': ('яблоко'),
         'сэндвич': ('королевич'), 'бутер': ('скутер'), 'бутерброд': ('огород'),
         'апельсин': ('мелатонин', 'бедуин', 'аладин'), 'брокколи': ('кокали'),
         'морковка': ('тусовка', 'колотушка', 'ментовка'), 'кончик': ('пончик', 'салончик'), 'морква': ('тёрка'),
         'елдык': ('чик-чарык', 'ярлык'), 'маркошка': ('ладошка', 'картошка', 'серёжка'),
         'морковина': ('урина', 'штуковина', 'хреновина'), 'хот-дог': ('бог', 'пролог'), 'пицца': ('птица'),
         'пончик': ('бумбончик', 'кончик'), 'торт': ('дискомфорт', 'киберспорт', 'спорт'), 'стул': ('обул', 'абдул'),
         'седалище': ('ристалище', 'товарищи'), 'диван': ('седан', 'уран'), 'растение в горшке': ('в мешке'),
         'растение': ('ополчение', 'спецподразделение', 'лесовосстановление', 'времяпровождение'),
         'кровать': ('обдристать', 'открывать', 'тетрадь', 'мать'), 'постель': ('туннель', 'супермодель', 'полишинель'),
         'койка': ('помойка', 'попойка', 'настройка'), 'обеденный стол': ('танцпол', 'укол'),
         'стол': ('танцпол', 'щегол'), 'туалет': (
    'нет-нет', 'минет', 'авиабилет', 'инет', 'марафет', 'самоцвет', 'комитет', 'стеклопакет', 'табурет'),
         'кабинет': ('инет', 'хребет'), 'толчок': ('качок', 'джаз-рок', 'электрошок'),
         'спальник': ('родоначальник', 'подсральник', 'напарник'), 'сортир': ('тир', 'чифир'),
         'телевизор': ('провизор', 'композитор'), 'телик': ('велик', 'челик'),
         'моник': ('дальтоник', 'слоник', 'броник'), 'монитор': ('генпрокурор', 'антитеррор', 'декор'),
         'ноутбук': ('бамбук'), 'ноут': ('оторвут'), 'мышь': ('дрожишь', 'эй слышь'), 'пульт': ('масскульт', 'инсульт'),
         'клавиатура': ('ты дура', 'инфраструктура', 'натура'), 'клава': ('жаба', 'любава', 'отрава'),
         'сотовый телефон': ('регион', 'автосалон'), 'телефон': ('автосалон'), 'мобила': (' текила'),
         'микроволновая печь': ('влечь', 'протечь'), 'микроволновка': ('маскировка', 'тусовка'), 'печь': ('протечь'),
         'тостер': ('постер', 'тесла родстер'), 'раковина': ('кран'), 'холодильник': ('мобильник', 'насильник'),
         'книга': ('нига', 'джига', 'суперлига', 'шаромыга'), 'часы': ('весы', 'трусы', 'не ссы', 'басы'),
         'ваза': ('мало газа', 'сектор газа'), 'ножницы': ('художницы', 'заложницы'), 'плюшевый мишка': ('воришка'),
         'фен': ('эстроген'), 'зубная щетка': ('чечётка')}


# загружаем сеть YOLO
def do(path_name):
    net = cv2.dnn.readNetFromDarknet(config_path, weights_path)

    image = cv2.imread(path_name)
    file_name = os.path.basename(path_name)
    filename, ext = file_name.split(".")

    h, w = image.shape[:2]
    # создать 4D blob
    blob = cv2.dnn.blobFromImage(image, 1 / 255.0, (416, 416), swapRB=True, crop=False)

    # устанавливает blob как вход сети
    net.setInput(blob)
    # получаем имена всех слоев
    ln = net.getLayerNames()

    ln = [ln[i - 1] for i in net.getUnconnectedOutLayers()]
    # прямая связь (вывод) и получение выхода сети
    # измерение времени для обработки в секундах
    start = time.perf_counter()
    layer_outputs = net.forward(ln)
    time_took = time.perf_counter() - start
    print(f"Потребовалось: {time_took:.2f}s")

    font_scale = 1
    thickness = 1
    boxes, confidences, class_ids = [], [], []
    # перебираем каждый из выходов слоя
    for output in layer_outputs:
        # перебираем каждое обнаружение объекта
        for detection in output:
            # извлекаем идентификатор класса (метку) и достоверность (как вероятность)
            # обнаружение текущего объекта
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]
            # отбросьте слабые прогнозы, убедившись, что обнаруженные
            # вероятность больше минимальной вероятности
            if confidence > CONFIDENCE:
                # масштабируем координаты ограничивающего прямоугольника относительно
                # размер изображения, учитывая, что YOLO на самом деле
                # возвращает центральные координаты (x, y) ограничивающего
                # поля, за которым следуют ширина и высота поля
                box = detection[:4] * np.array([w, h, w, h])
                (centerX, centerY, width, height) = box.astype("int")
                # используем центральные координаты (x, y) для получения вершины и
                # и левый угол ограничительной рамки
                x = int(centerX - (width / 2))
                y = int(centerY - (height / 2))
                # обновить наш список координат ограничивающего прямоугольника, достоверности,
                # и идентификаторы класса
                boxes.append([x, y, int(width), int(height)])
                confidences.append(float(confidence))
                class_ids.append(class_id)

    # перебираем сохраняемые индексы
    r = []
    for i in range(len(boxes)):
        r.append([labels[class_ids[i]], str(i)])

    res = sorted(r, reverse=True)
    # print(res)
    prev = ["", ""]
    new = []
    for i in res:

        if prev[0] != i[0]:
            new.append(prev)
            prev = i
        else:
            if float(i[1]) > confidences[int(prev[1])]:
                prev = i
    new.append(prev)
    new.pop(0)

    for i in range(len(new) - 1):
        for j in range(len(new) - i - 1):
            if confidences[(int(new[j][1]))] < confidences[(int(new[j + 1][1]))]:
                new[j], new[j + 1] = new[j + 1], new[j]
    print(new)
    if len(new) == 1:
        ch = sinonims[new[0][0]]

        if ch[0] == new[0]:
            vib = random.randint(1, 3)
            if vib == 1:
                blackFON.r(path_name, str(new[0] + '?'))
                blackFON.r(path_name, str('да, ' + new[0]))
            else:
                predlog = random.choice(predlogs)
                # синоним и предлог

                v2 = random.choice(RIFMA[new[0][0]])
                blackFON.r(path_name, new[0][0])
                blackFON.r(path_name, str(predlog + v2))
            # рифма или что то с глаголом
        else:
            vib = random.randint(1, 7)
            if vib == 1:
                predlog = random.choice(predlogs)
                # синоним и предлог
                ch.append(new[0][0])
                ch1 = list(set(ch))
                ch = ch1

                v1 = random.choice(ch)
                v2 = random.choice(ch)
                i = 0
                while (v1 == v2) and i < 10:
                    v2 = random.choice(ch)
                    i += 1
                print(v1, v2)
                blackFON.r(path_name, v1)
                blackFON.r(path_name, str(predlog + v2))
            elif (vib == 2) or (vib == 4) or (vib == 5) or (vib == 6) or (vib == 7):

                predlog = random.choice(predlogs)
                # синоним и предлог
                ch.append(new[0][0])
                v1 = random.choice(ch)
                x = RIFMA[v1]
                if (type(x) == str):
                    v2 = x
                else:
                    v2 = random.choice(x)
                print('rifma  ' + str(v2) + '  ' + str(RIFMA[v1]))
                print(ch)
                blackFON.r(path_name, v1)
                blackFON.r(path_name, str(predlog + v2))
            elif vib == 3:
                vibors = ('ну да, ', 'ну как бы просто ', 'это лишь ', 'все ещё ')
                ch.append(new[0][0])
                v1 = random.choice(ch)
                blackFON.r(path_name, v1)
                v = random.choice(vibors)
                blackFON.r(path_name, str(v + v1))

    if len(new) > 1:
        vib1 = random.randint(1, 5)
        if vib1 == 1 or 2:
            vib = random.randint(1, 2)
            if vib == 1:
                v = random.choice(new[1:3])[0]
                ch = sinonims[v]
                predlog = random.choice(predlogs)
                # синоним и предлог
                ch.append(v)
                v1 = random.choice(ch)
                v2 = random.choice(ch)
                i = 0
                while (v1 == v2) and i < 10:
                    v2 = random.choice(ch)
                    i += 1
                blackFON.r(path_name, v1)
                blackFON.r(path_name, str(predlog + v2))
            elif vib == 2:
                ch = sinonims[new[0][0]]
                predlog = random.choice(predlogs)
                # синоним и предлог
                ch.append(new[0][0])
                v1 = random.choice(ch)
                v2 = random.choice(ch)
                i = 0
                while v1 == v2:
                    i += 1
                    v2 = random.choice(ch)
                blackFON.r(path_name, v1)
                blackFON.r(path_name, str(predlog + v2))

            elif vib == 3:
                # глагол
                pass
        elif vib1 == 3:
            predlog = random.choice(predlogs)
            vib2 = random.choice(new[1:3])[0]
            ch = sinonims[new[0][0]]
            ch.append(new[0][0])
            vib1 = random.choice(ch)
            ch = sinonims[vib2]
            ch.append(vib2)
            vib2 = random.choice(ch)
            blackFON.r(path_name, vib1)
            blackFON.r(path_name, str(predlog + vib2))
        elif vib1 == 4:
            for i in new:
                ch = sinonims[i[0]]
                ch.append(i[0])
                vib1 = random.choice(ch)
                blackFON.r(path_name, vib1)
        elif vib == 5:
            xx = random.randint(0, len(new))
            predlog = random.choice(predlogs)
            # синоним и предлог
            x = RIFMA[new[xx][0]]
            if (type(x) == str):
                v2 = x
            else:
                v2 = random.choice(x)
            print('rifma  ' + str(v2) + '  ' + str(RIFMA[new[xx][0]]))
            blackFON.r(path_name, new[xx][0])
            blackFON.r(path_name, str(predlog + v2))

# do("test.jpg")
